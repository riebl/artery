[General]
network = artery.envmod.World

result-dir = /tmp/most/

# Store results in SQLite database
outputvectormanager-class="omnetpp::envir::SqliteOutputVectorManager"
outputscalarmanager-class="omnetpp::envir::SqliteOutputScalarManager"

repeat = 1

*.traci.core.version = -1
*.traci.launcher.typename = "PosixLauncher"

**.vehicle_rate = ${mprate= 0.1, 0.2, 0.4, 0.6, 0.8, 1.0}
**.plain_rate =   ${plain=  0.9, 0.8, 0.6, 0.4, 0.2, 0.0 ! mprate}


# warmup and simulation configuration
*.warmupDuration     = ${ warmupDuration     = 5s }
*.simulationDuration = ${ simulationDuration = 60s }

# see above for configuration of mapper's random number generator (rng)
*.traci.mapper.typename = "traci.MultiVClassMultiTypeModuleMapper"
*.traci.mapper.basicNodeManager = "traci.nodes"
*.traci.mapper.vehicleTypes = xml \
("\
<roadusers> \
    <vehicles vClass=\"passenger evehicle taxi bus coach trailer delivery truck trailer\"> \
        <vehicle type=\"artery.envmod.Car\" rate=\"${mprate}\" /> \
        <vehicle type=\"artery.envmod.PlainVehicle\" rate=\"${plain}\" /> \
    </vehicles> \
    <vehicles vClass=\"emergency authority army\"> \
        <vehicle type=\"artery.envmod.Car\" rate=\"1.0\" /> \
    </vehicles> \
    <vehicles vClass=\"rail\"> \
        <vehicle type=\"artery.envmod.PlainVehicle\" rate=\"1.0\" /> \
    </vehicles> \
    <vehicles vClass=\"moped motorcycle bicycle\"> \
        <vehicle type=\"artery.envmod.PlainVehicle\" rate=\"1.0\" /> \
    </vehicles> \
</roadusers> \
")

*.traci.mapper.personTypes = xml \
("\
<roadusers> \
    <persons vClass=\"pedestrian\"> \
        <person type=\"artery.envmod.PlainPerson\" rate=\"1.0\" /> \
    </persons> \
</roadusers> \
")

*.node[*].wlan[*].typename = "VanetNic"
*.node[*].wlan[*].radio.channelNumber = 180
*.node[*].wlan[*].radio.carrierFrequency = 5.9 GHz
*.node[*].wlan[*].radio.transmitter.power = 200 mW

# Disable all other metrics from WLAN stack (irrelevant to us):
**.wlan[*].**.statistic-recording = false

# Radio Simulation Configuration
*.radioMedium.pathLossType = "Gemv2"
*.radioMedium.pathLoss.withSmallScaleVariations = false

# DCC configuration
**.vanetza[*].dcc.typename = "LimericDccEntity"
**.vanetza[*].dcc.ChannelProbeProcessor = "SmoothingLocal"
**.vanetza[*].dcc.queueLength = 2
**.vanetza[*].dcc.targetCbr = 0.68
**.vanetza[*].dcc.enableDualAlpha = true


# Middleware Configuration
*.node[*].middleware.updateInterval = 0.1s
*.node[*].middleware.datetime = "2023-06-01 12:35:00"
*.node[*].middleware.services = xmldoc("services.xml")

# Environment Model Configuration
**.identityRegistryModule = "idRegistry"
*.environmentModel.drawObstacles = true
*.environmentModel.drawVehicles = true
*.environmentModel.traciModule = "traci"
*.environmentModel.nodeMobilityModule = ".mobility"
*.node[*].environmentModel.sensors = xmldoc("sensors.xml")


[Config most]
*.traci.nodes.typename = "ExtensibleNodeManager"
*.traci.ignorePersons = false
*.traci.nodes.handleParkingVehicles = true
*.traci.nodes.numVehiclePolicies = 3
# only simulated the inner city area
*.traci.nodes.vehiclePolicy[0].typename = "RegionOfInterestVehiclePolicy"
*.traci.nodes.vehiclePolicy[0].regionsOfInterest = xmldoc("roi_urban.xml")
# remove overlapping vehicles in parking lots
*.traci.nodes.vehiclePolicy[1].typename = "OverlappingVehiclesPolicy" 
*.traci.nodes.vehiclePolicy[1].subscriptionManager = "traci.subscriptions"
*.traci.nodes.vehiclePolicy[1].basicNodeManager = "traci.nodes"
# add insertion delay to vehicles
*.traci.nodes.vehiclePolicy[2].typename = "InsertionDelayVehiclePolicy"

*.traci.launcher.sumocfg = ${sumocfg = "MoSTScenario/scenario/most.sumocfg"}
*.traci.launcher.extraOptions = "--step-length 0.1 --default.action-step-length 0.3"
*.traci.launcher.seed = 42 # default

# consider buldings as obstacles for GEMV2 path loss model
*.radioMedium.pathLoss.obstacles.filterTypes = "building building.castle building.church building.commercial building.fort building.yes building.public building.office building.sports_hall building.industrial building.residential"

# consider buldings as obstacles for environment model
*.environmentModel.obstacleTypes = "building building.castle building.church building.commercial building.fort building.yes building.public building.office building.sports_hall building.industrial building.residential"

# scenario offset is 14400s (4AM), simulation takes place at 28800s (8:00AM)
*.traci.core.startTime = ${traciStartTime = 14400}s
#*.traci.core.startTime = ${traciStartTime = 10000}s
warmup-period = ${${traciStartTime}s+$warmupDuration}
sim-time-limit = ${${traciStartTime}s+$warmupDuration+$simulationDuration}

